plugins {
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 27
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    sourceSets {
        androidTest.setRoot('src/androidTest/')
    }
    lintOptions {
        abortOnError false
    }
}

configurations {
    doclava
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:' + rootProject.supportLibVersion
    implementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.8.5'
    implementation 'com.google.android.gms:play-services-ads:15.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
    testImplementation "org.robolectric:robolectric:3.7.1"
    androidTestImplementation 'com.android.support:support-annotations:' + rootProject.supportLibVersion
    androidTestImplementation 'com.android.support.test:runner:' + rootProject.runnerVersion
    androidTestImplementation 'com.android.support.test:rules:' + rootProject.rulesVersion
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    doclava 'com.google.doclava:doclava:1.0.6'
}

def packageVersion = '0.2'

task sourceJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
    failOnError = false
    title = null
    source = android.sourceSets.main.java.srcDirs
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

publishing {
    publications {
        libraryPublish(MavenPublication) {
            groupId 'com.google.android.libraries.tv'
            artifactId 'companionlibrary'
            version packageVersion
            artifacts = configurations.archives.artifacts
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['libraryPublish']
    publish = true
    pkg {
        repo = 'tif-companion'
        name = 'tif-companion'
        userOrg = 'google'
        version {
            name = packageVersion
            gpg {
                sign = true
            }
        }
    }
}